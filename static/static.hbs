var Stirrup = function(library, config) {
  if(typeof library !== 'object' && typeof library !== 'function') {
    throw 'You must provide Stirrup with a promise library';
  }
  var isNative = (typeof Promise === 'function' && Promise.toString().indexOf('[native code]') > -1);
  var exposed;
  if(isNative) {
    exposed = Promise;
  } else {
    exposed = {{#if constructor}}library[config.constructor]{{else}}library{{/if}};
  }
  buildDefer(exposed, config, isNative);
  {{#each staticFuncs}}{{#if nativeName}}
  if(isNative && Promise['{{nativeName}}']) {
  {{#if aliases}}{{#each aliases}}  exposed['{{this}}'] = Promise['{{../nativeName}}'];{{/each}}{{else}}
    exposed['{{libName}}'] = Promise['{{nativeName}}'];
  {{/if}}
  } else { {{#each aliases}}
    exposed['{{this}}'] = library['{{../libName}}'];{{/each}}
  }
  {{else}}{{#each aliases}}
  exposed['{{this}}'] = library['{{../libName}}'];{{/each}}{{/if}}{{/each}}
  return exposed;
}